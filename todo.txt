Logged in:
- When logging in for the first time, an account is created for me. And I'm unable to create game servers by default.
- When logged in, i have the option to swap to another server.
- If account is given permission to create servers, I can create a server. I will be admin by server created by me.

Administrator:
- As administrator on a server, I can manage the game server.
- As administrator on a server, I am unable to play on the server.
- As administrator on a server, I can create and modify actions available to players.
- As administrator on a server, I can set up requirements for executing an action.
- As administrator on a server, I can set up rewards for executing an action.
- As administrator on a server, I can set up costs for executing an action.

Player:
- As a player on a server, I can play on the server..
- As a player on a server, I can see what actions are available to me.
- As a player on a server, I can do an action and be rewarded accordingly.
- As a player on a server, I recive energy to spend on doing actions.

Technical:
Current Server is stored as a cookie
Workflow - typecheck, linting and formatting
CI/CD
Open Telemetry

App2 Auth Implementation:
Provider Configuration:
- Support Google OAuth provider (extendable for more providers) (DONE)
- Provider requires: clientId, clientSecret, url.origin(Base URL) (DONE)

Auth Flow:
- Framework validate API requests using Valibot schemas. (We catch incorrect data types and values)
- Framework handles OAuth flow internally
- Framework generates login URL (available in context)
- Framework handles token refresh automatically
- Framework manages secure cookie storage
- Framework provides protected login/logout routes

User Hooks:
- afterLogin: Called after successful OAuth with provider data (DONE)
  - Receives: email, accessToken, refreshToken, provider
  - User implements account creation/update logic
- beforeLogout: Called before clearing auth session (DONE)
  - Receives: current account and session data
  - Optional cleanup tasks
- validateRequest: Called on every authenticated request
  - Receives: current account and session
  - Custom validation logic (e.g., check if account is banned)

Security:
- Secure cookie settings (httpOnly, sameSite)
- CSRF protection
- Token refresh mechanism
- Session expiration handling
- Environment variable validation

Context:
- Can we also provide global context outside of the route? It would not have any fancy type inference, but we can fetch this context from anywhere.
- While the route implementation is very good at form validation and its outputs, but you can't use it outside for other then that particular route.
- I think we can implement this global context by wrapping component in another context and providing a halper function to get that context and use it in any component.