---
description: How to properly implement JS docs for components
globs: 
alwaysApply: false
---
# JSDoc Standard for JSX Components

This document outlines the standard format for JSDoc comments for React functional components (`FC`) within this project. Consistent documentation improves code readability, maintainability, and aids IDE tooling.

## Standard Structure

All React functional components should include a JSDoc comment block above their definition, following this structure:

```typescript
/**
 * [One-liner describing the component's primary purpose]
 *
 * [Optional: More detailed explanation or a "Features:" section with bullet points.]
 *
 * @props
 * - propName: Description of the prop. Include possible values (especially for variants) and defaults.
 * - anotherPropName: Description of another prop.
 * - children: Description of what the `children` prop represents (if applicable).
 * - ...rest: Mention if standard HTML attributes or `BaseComponentProps` are accepted and where they are passed (e.g., "Standard HTML attributes passed to the root element.").
 *
 * @example
 * <MyComponent propName="value">
 *   Content
 * </MyComponent>
 *
 * @example (Include multiple examples if useful)
 * <MyComponent propName="value" anotherPropName={true}>
 *   Different Content
 * </MyComponent>
 */
```

## Key Elements Explained

1.  **Summary Line:**
    *   **Required:** Start with a single, concise sentence describing the component's main function.

2.  **Detailed Description / Features (Optional):**
    *   Provide more context, explain nuances, or list key features using bullet points if the component is complex.

3.  **`@props` Block:**
    *   **Required:** Use the literal `@props` tag (not `@param` or `@arg`).
    *   Follow `@props` with a bulleted list (`- propName: Description`).
    *   **propName:** The exact name of the prop.
    *   **Description:** Clearly explain the prop's purpose.
        *   For props with limited values (like `variant`), list the possible options (e.g., `variant: Style variant (default, primary, danger)`).
        *   Mention default values if applicable.
        *   Describe `children` if the component accepts them.
        *   Explain what `{...rest}` props represent and where they are spread.

4.  **`@example` Block(s):**
    *   **Required:** Include at least one clear usage example demonstrating a common use case.
    *   Use additional `@example` blocks for different scenarios or variants if helpful.

## Full Example Template

Use this template as a starting point for documenting new components:

```typescript
import type { FC } from "@kalena/framework"; // Adjust import as needed
import type { BaseComponentProps } from "@comp/utils/props"; // Adjust import as needed

// Define Props type if necessary
type MyComponentProps = BaseComponentProps & {
  /** Prop description for type definition (optional) */
  variant?: "default" | "special";
  /** Another prop description */
  isEnabled?: boolean;
};

/**
 * Component for demonstrating the standard JSDoc format.
 *
 * This section provides more detail about the component's role and maybe lists features.
 * - Feature 1: Does something cool.
 * - Feature 2: Integrates with X.
 *
 * @props
 * - variant: Controls the visual style ('default', 'special'). Defaults to 'default'.
 * - isEnabled: Determines if the component is interactive.
 * - children: Content to be rendered inside the component.
 * - ...rest: Standard HTML attributes passed to the root `div` element.
 *
 * @example
 * <MyComponent variant="special" isEnabled>
 *   Hello World!
 * </MyComponent>
 *
 * @example
 * <MyComponent>
 *   Basic usage with default props.
 * </MyComponent>
 */
export const MyComponent: FC<MyComponentProps> = (
  { variant = "default", isEnabled, children, className, ...rest },
) => {
  // Component Implementation
  return (
    <div {...rest} className={/* Apply classes based on props */ className}>
      {children}
    </div>
  );
};
```