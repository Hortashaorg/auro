---
description: How to name and organise files and code
globs: 
alwaysApply: false
---
# Route Structure and Implementation Guidelines

## 1. File Naming Conventions

### Required File Types
Each route directory MUST follow these naming conventions:
- `*.page.tsx` - Main route pages/views
- `*.api.tsx` - API endpoints/handlers
- `*.section.tsx` - Reusable section components specific to the route
- `index.ts` - Route exports

### Naming Patterns
- API routes: Use verb-first naming (e.g., `AddActionResourceRewards.api.tsx`)
- Section components: Should be very clear what UI element it is (e.g., `ResourceList.section.tsx`)
- Page components: Name should reflect what page it is (e.g., `Action.page.tsx` for actions/{actionId})

## 2. Directory Structure

### Dynamic Routes
Dynamic route segments MUST be enclosed in square brackets:
`routes/servers/[serverId]/admin/actions/[actionId]/`

### Feature Organization
Routes MUST be organized by feature, with nested routes following a logical hierarchy:
```
routes/
    feature/
        Feature.page.tsx
        FeatureList.section.tsx
        [featureId]/
            FeatureDetail.page.tsx
            SubFeature.section.tsx
```

## 3. Route Implementation

### Route Creation
- MUST use `createRoute` from `@kalena/framework`
- MUST include proper permission checks
- MUST specify `partial` flag appropriately
- MUST enable HMR for local development

Example:
```typescript
export const featureRoute = createRoute({
  path: "/feature/:featureId",
  component: FeatureComponent,
  permission: {
    check: hasPermission,
    redirectPath: "/fallback"
  },
  partial: false,
  hmr: Deno.env.get("ENV") === "local"
});
```

### API Routes
- MUST include input validation using the framework's validation tools
- MUST handle errors appropriately and return consistent error responses
- MUST use proper HTTP methods and status codes
- MUST follow REST principles for endpoint naming

## 4. Component Organization

### Page Components
- MUST handle layout and composition
- MUST use the Layout component
- MUST handle route parameters and data fetching
- SHOULD delegate complex UI to section components

### Section Components
- MUST be focused on specific functionality
- MUST be reusable within the route




