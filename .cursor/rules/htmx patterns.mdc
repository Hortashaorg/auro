---
description: HTMX Integration and API Endpoint Patterns
globs: 
alwaysApply: false
---

# HTMX Integration and API Endpoint Patterns

## HTMX Component Support

- All components support HTMX attributes through `BaseComponentProps`
- Use HTMX attributes directly on components without any special handling
- Common HTMX attributes are already typed in BaseComponentProps:

```typescript
// These attributes are already available on all components
"hx-get"?: string;
"hx-post"?: string;
"hx-put"?: string;
"hx-delete"?: string;
"hx-patch"?: string;
"hx-swap"?: string;
"hx-target"?: string;
"hx-trigger"?: string;
"hx-indicator"?: string;
```

## Section ID Conventions

- Use consistent, descriptive IDs for all HTMX-targeted elements
- Follow pattern: `${feature}-${subfeature}-${identifier}`
- Include unique identifiers for list items

```typescript
// Good
<Section id={`resource-leaderboard-${resourceId}`}>
  {/* Content */}
</Section>

// Avoid
<Section id="leaderboard">
  {/* Content */}
</Section>
```

## Form Validation

- Use Valibot for form validation schemas
- Define validation schema at the bottom of the file
- Reference it in route definition with `formValidationSchema`

```typescript
// Form validation schema
const UpdateAccountNicknameSchema = v.object({
  nickname: v.pipe(v.string(), v.minLength(3), v.maxLength(50)),
});

// Route definition
export const updateAccountNicknameRoute = createRoute({
  path: "/api/account/update-nickname",
  component: UpdateAccountNickname,
  partial: true,
  formValidationSchema: UpdateAccountNicknameSchema,
});
```

## Error Handling

- Access form validation result with `context.req.valid("form")`
- Handle validation errors with form-error events
- Use HX-Trigger for error responses:

```typescript
if (!result.success) {
  const errorEvents: Record<string, string> = {};

  for (const issue of result.issues) {
    const field: string = issue.path?.[0]?.key as string ??
      throwError("Invalid issue path");
    errorEvents[field] = issue.message;
  }

  context.header(
    "HX-Trigger",
    createEvents([
      {
        name: "form-error",
        values: errorEvents,
      },
    ]),
  );

  return <p>Failure</p>;
}
```

## Event Trigger Conventions

Use consistent event names across the application:

- `form-error` - For form validation errors
- `clear-form` - To reset form inputs
- `toast` - To display notifications

```typescript
// Success response example
context.header(
  "HX-Trigger",
  createEvents([
    { name: "clear-form", values: { value: true } },
    {
      name: "toast",
      values: { type: "success", message: "Updated successfully" },
    },
  ]),
);
```

## Out-of-Band Updates

- Use `hx-swap-oob` to update multiple components from a single endpoint
- Provide unique IDs for all components that need updates
- Return multiple components with the same ID as on the page

```typescript
// Endpoint component that updates multiple parts of the page
export const UpdateProfile = async (context: Context) => {
  // Process form...

  return (
    <>
      <UserBadge user={updatedUser} hx-swap-oob="true" />
      <ProfileForm user={updatedUser} hx-swap-oob="true" />
      <div id="success-message" hx-swap-oob="true">
        Profile updated successfully
      </div>
    </>
  );
};
```

## Component Data Fetching

- Components should fetch their own data when possible
- Handle loading and empty states explicitly
- Use Promise.all for parallel data fetching

```typescript
export const ResourcesTable = async ({ serverId }: Props) => {
  const resources = await getServerResources(serverId);

  if (!resources.length) {
    return <EmptyState message="No resources found" />;
  }

  return (
    <Table>
      {/* Table content */}
    </Table>
  );
};
```

## Partial Routes

- Use partial routes (`partial: true`) for all HTMX endpoints
- Ensure they return only the necessary component, not a full page
- Register partial routes in main.ts

```typescript
export const updateProfileRoute = createRoute({
  path: "/api/profile/update",
  component: UpdateProfile,
  permission: {
    check: isLoggedIn,
    redirectPath: "/",
  },
  partial: true,
  formValidationSchema: UpdateProfileSchema,
});
```
