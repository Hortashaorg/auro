---
description: UI Interaction Patterns
globs: 
alwaysApply: false
---
# UI Interaction Patterns

This document outlines the conceptual approaches for common UI interactions in the application. It focuses on when to use different patterns and their relative benefits.

## Core Interaction Philosophy

The application uses two primary mechanisms for UI interactions:

1. **Client-Side State (Alpine.js)** - For self-contained UI changes that don't require server data
2. **Server Interactions (HTMX)** - For data operations or fetching content

Every UI interaction should consciously choose the appropriate mechanism based on the needs of the feature.

## Pattern 1: Inline Editing

**Concept:** Allow users to edit content in-place without navigating to a separate page or opening a modal.

**When to use:**
- Simple edits of a single field or closely related fields
- High-frequency editing operations
- When maintaining context is important for the user

**Implementation approach:**
- Use Alpine.js to toggle between display and edit states
- Only communicate with the server when saving changes
- Use HTMX to submit the form and update the UI with the result

**Anti-patterns to avoid:**
- Using server requests to toggle between edit and display states
- Implementing inline editing for complex forms with many fields or validations

## Pattern 2: Modal Interactions

**Concept:** Display focused content or forms in a modal dialog that overlays the current page.

**When to use:**
- Creating new items
- Editing items with multiple fields
- Actions requiring focused attention
- Actions requiring confirmation (e.g., deletion)

**Implementation approach:**
- Co-locate modal content with the triggering component when possible
- Use ModalButton and Modal components for consistent implementation
- For forms, handle submission with HTMX and close the modal on success

**Anti-patterns to avoid:**
- Using modals for simple toggles or minor UI adjustments
- Creating overly complex multi-step flows within a single modal
- Nesting modals within modals

## Pattern 3: Collection Management

**Concept:** Display and manipulate collections of related items (tables, lists, grids).

**When to use:**
- Displaying multiple items of the same type
- Providing consistent actions across items
- When users need to compare or scan multiple items

**Implementation approach:**
- Use tables for structured data with multiple properties
- Use lists for simpler collections
- Use grids for visual content like cards or images
- Implement batch operations when applicable
- Include confirmation for destructive actions

**Anti-patterns to avoid:**
- Mixing different item types in a single collection view
- Implementing different interaction patterns for the same action across items

## Pattern 4: Progressive Disclosure

**Concept:** Reveal additional options or content based on user selection or need.

**When to use:**
- Forms with conditional fields
- Advanced options that most users don't need
- Interfaces that would otherwise be overwhelming

**Implementation approach:**
- Use Alpine.js to control visibility of optional sections
- Base disclosed content on user selections or toggle actions
- Keep the default view focused on the most common use cases

**Anti-patterns to avoid:**
- Hiding essential functionality behind progressive disclosure
- Creating confusing dependencies between selections and displayed content

## Pattern 5: Filterable Collections

**Concept:** Allow users to filter, sort, or search collections of items.

**When to use:**
- Large collections that users need to navigate efficiently
- When users have specific criteria for finding items
- Collections with diverse attributes that can be filtered

**Implementation approach:**
- Use Alpine.js for instant filtering of client-side data
- Use HTMX for server-side filtering of larger datasets
- Provide clear visual feedback on active filters

**Anti-patterns to avoid:**
- Implementing complex filtering client-side for large datasets
- Creating filter options that rarely return results