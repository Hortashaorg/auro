---
description: 
globs: 
alwaysApply: true
---
# Rule: Strong Preferences for Implementation

This rule contains non-negotiable preferences that guide all implementation decisions. These are strong opinions that should be followed consistently across all recipes and tasks.

## Core Implementation Preferences

1. **Use `throwError` to assert expectations** - If you expect something to not be undefined, assert it. We want to break if our assumptions are incorrect.

2. **Infer types from database schema** - Use `InferSelectModel<typeof schema.table>` instead of creating custom types.

3. **No comments in code** - If code is unclear, it's a structure problem, not a comment problem.

4. **Use existing components, never raw HTML** - If the component doesn't exist, ask for it to be created first.

5. **No custom Tailwind classes** - Use component props for styling, not className overrides.

6. **Database operations in transactions** - Multiple related database changes must be atomic.

7. **Grep for existing patterns before implementing** - If implementing a Table, grep for `<Table` in the codebase. If creating a new page, check existing `.page.tsx` files. When patterns aren't clear, prompt the user for examples.

8. **Reference the actual codebase over documentation** - When rules/docs conflict with existing code patterns, follow the code and flag the discrepancy.

9. **Database updates should always set updatedAt** - If the column exists, include `updatedAt: Temporal.Now.instant()` in all update operations.

10. **Consider performance impact of async operations** - Multiple database queries or fetches should be evaluated: Can we do it in fewer requests? Are we querying unnecessary data? Is the optimization worth the complexity?

## Usage

These preferences apply to all implementation work and should be consulted alongside specific recipes. When in doubt between approaches, these preferences take priority.
