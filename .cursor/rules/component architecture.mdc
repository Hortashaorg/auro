---
description: Component Architecture Rules
globs: 
alwaysApply: false
---

# Component Architecture Rules

## BaseComponentProps Pattern

- Always use `BaseComponentProps` as the foundation for component props instead
  of `JSX.IntrinsicElements`
- Import from: `@comp/utils/props.ts`
- Ensures consistent HTMX and Alpine.js attribute support

```typescript
// Good
import type { BaseComponentProps } from "@comp/utils/props.ts";

type ButtonProps = BaseComponentProps & {
  variant: "primary" | "secondary" | "outline";
  buttonSize?: "sm" | "md" | "lg" | "xl";
};

// Avoid
type ButtonProps = JSX.IntrinsicElements["button"] & {
  variant: "primary" | "secondary" | "outline";
  buttonSize?: "sm" | "md" | "lg" | "xl";
};
```

## Component Variants Pattern

- Use class-variance-authority (cva) for defining style variants
- Extract type information using `NonNullableProps<typeof yourVariants>`
- Include clear default variants

```typescript
const buttonVariants = cva([
  "common classes",
], {
  variants: {
    variant: {
      primary: "primary classes",
      secondary: "secondary classes",
    },
    buttonSize: {
      sm: "small classes",
      md: "medium classes",
      lg: "large classes",
    },
  },
  defaultVariants: {
    variant: "primary",
    buttonSize: "md",
  },
});

type ButtonVariants = NonNullableProps<typeof buttonVariants>;
type ButtonProps = BaseComponentProps & ButtonVariants;
```

## Component Documentation

All components require JSDoc with:

```typescript
/**
 * Short description of the component
 *
 * @props
 * - prop1: Description of prop1
 * - prop2: Description of prop2
 *
 * @example
 * <ComponentName prop1="value" prop2={true}>
 *   Children content
 * </ComponentName>
 */
```

## Wrapper Components

Use appropriate wrapper components for layout:

- `Flex`: For flexbox layouts with direction, alignment, justification
- `Grid`: For grid layouts with configurable columns and rows
- `Section`: For semantic sections with standard padding
- `Card`: For content cards with configurable styling options

## Component Family Pattern

Related components should work together with consistent APIs:

```typescript
// Form component family example
<Form id="profile-form" hx-post="/api/profile/update">
  <FormControl inputName="name">
    <Label htmlFor="name" required>Name</Label>
    <Input id="name" name="name" />
  </FormControl>
</Form>

// Button component family example
<ButtonGroup spacing="md" alignment="end">
  <Button variant="outline">Cancel</Button>
  <Button variant="primary">Submit</Button>
</ButtonGroup>
```

## Component Migration Process

When updating components:

1. Replace JSX.IntrinsicElements with BaseComponentProps
2. Update JSDoc to use the `@props` format
3. Ensure className handling has a fallback:
   `className={cn(variants, className || "")}`
4. Consider converting string literals to CVA variants
