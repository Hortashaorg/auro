---
description: Concept of events (High level)
globs: 
alwaysApply: false
---
# Event System & Naming Conventions

This document outlines the event system used within the application for client-server communication, particularly through HTMX. Understanding these patterns is crucial for consistent UI feedback and interaction.

## 1. Event System Overview

The application uses a structured event system to:

- Trigger UI updates (show/hide modals, display notifications)
- Provide feedback on form operations (successes, validation errors)
- Coordinate multiple UI elements after server operations
- Maintain a consistent user experience across features

Events are dispatched through the `HX-Trigger` response header in API endpoints and processed by HTMX on the client side. The application provides a typed utility function (`createEvents`) to ensure consistency.

## 2. Naming Convention

Events should be named using **kebab-case** and follow the pattern:

`[scope/subject]-[action/state]`

- **`scope/subject`**: (Required) The primary entity, component, or context the event relates to.
  - *Examples:* `dialog`, `form`, `toast`, `user-profile`, `data-table`
- **`action/state`**: (Required) The specific action that occurred or the state being signaled.
  - *Examples:* `open`, `close`, `submit`, `clear`, `update`, `error`, `success`, `show`, `hide`, `select`, `change`

## 3. Core Event Types

The application defines several core event types in `services/app/components/utils/events.ts`:

| Event Type | Purpose | Payload Structure | Common Usage |
|------------|---------|-------------------|-------------|
| `dialog-close` | Close a modal dialog | `{ value: boolean }` | After successful form submission in a modal |
| `form-clear` | Reset a form to initial state | `{ value: boolean }` | After submission to prepare for new entry |
| `form-error` | Display field-specific validation errors | `{ [fieldName]: "Error message" }` | When server-side validation fails |
| `toast-show` | Display a notification toast | `{ message: string, variant: "info" \| "warning" \| "success" \| "danger", title: string }` | Provide feedback after operations |

## 4. Common Event Patterns

### Success Pattern
Used after a successful operation to provide feedback and potentially update UI:

```typescript
context.header(
  "HX-Trigger",
  createEvents([
    { name: "dialog-close", values: { value: true } },
    { name: "toast-show", values: {
      message: "Operation completed successfully",
      variant: "success",
      title: "Success"
    }}
  ]),
);
```

### Error Pattern
Used to communicate errors, either at field level or generally:

```typescript
// Field-specific error
context.header(
  "HX-Trigger",
  createEvents([{
    name: "form-error",
    values: { fieldName: "This value is invalid" },
  }]),
);

// General error notification
context.header(
  "HX-Trigger",
  createEvents([{
    name: "toast-show",
    values: {
      message: "An error occurred",
      variant: "danger",
      title: "Error"
    },
  }]),
);
```

### Multi-step Pattern
Used when a sequence of UI updates is needed:

```typescript
context.header(
  "HX-Trigger",
  createEvents([
    { name: "dialog-close", values: { value: true } },
    { name: "form-clear", values: { value: true } },
    { name: "toast-show", values: {
      message: "Item created and ready to use",
      variant: "success",
      title: "Success"
    }}
  ]),
);
```

## 5. Extending the Event System

When adding new event types:

1. Add the event type and its payload structure to the `events` type in `services/app/components/utils/events.ts`
2. Follow the naming convention (`scope-action`)
3. Keep payloads simple and focused
4. Document the new event type and its usage

```typescript
// Example of extending the events type
type events = {
  // Existing events...
  
  // New event
  "item-select": {
    itemId: string;
    selected: boolean;
  };
};
```

## 6. Best Practices

- **Consistency**: Use the same event patterns for similar operations across the application
- **Typography**: Always use kebab-case for event names
- **Specificity**: Make event names specific enough to avoid conflicts
- **Documentation**: Comment non-obvious event triggers in your code
- **Payload Minimalism**: Include only what's needed in event payloads
- **Type Safety**: Always use the `createEvents` helper to ensure type checking

## 7. Common Anti-patterns to Avoid

- **Overloading Events**: Don't overload events with too many responsibilities
- **Generic Names**: Avoid overly generic event names like `update` without a scope
- **Large Payloads**: Keep event data minimal - pass IDs instead of entire objects
- **HTML in Messages**: Toast messages should be plain text, not HTML
- **Non-descriptive Names**: Event names should clearly indicate their purpose
