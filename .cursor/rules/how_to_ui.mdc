---
description: How to propery build UI
globs: 
alwaysApply: false
---
# UI Building Guidelines

Follow these principles when developing UI components and features to ensure consistency, maintainability, and reusability.

## 1. Leverage Atomic Design Components

- Prioritize Atoms & Molecules: When constructing UI elements or features, primarily use the existing Atoms and Molecules defined in `services/app/components/atoms/` and `services/app/components/molecules/`. Refer to the `components.mdc` rule for an overview.
- Avoid Style Overrides: Refrain from overriding the default styles of existing Atom and Molecule components (e.g., using inline styles or overly specific CSS selectors). Their predefined styles ensure visual consistency.
- Extend or Create, Don't Hack: If the existing components don't meet the required functionality or visual appearance:
    - Consider if an existing component can be *extended* with new variants or props to support the use case.
    - If extension isn't feasible, create a *new* reusable Atom or Molecule following the established patterns.
    - Avoid creating one-off styles or complex local component structures for things that should be part of the core component library.


## 2. Structure for Route-Specific Dynamic Content (HTMX)

- **Co-locate within Routes:** When building UI fragments designed for HTMX interactions (swapping, partial updates) that are specific to a particular route (e.g., editing profile nicknames), place both the component rendering the fragment (using the `.section.tsx` suffix, e.g., `EditNicknamesForm.section.tsx`) and the API endpoint handling the HTMX request (using the `.api.tsx` suffix, e.g., `UpdateNicknames.api.tsx`) directly within that route's directory in `services/app/routes/`.
- **Follow Route Structure:** Adhere to the organization outlined in [repo_structure.mdc](mdc:.cursor/rules/repo_structure.mdc). For instance, profile-related sections and APIs belong in `services/app/routes/profile/`.
- **Use Naming Conventions:** Employ noun-first naming for section components (e.g., `ProfileDetails.section.tsx`) and verb-first naming for API endpoints (e.g., `UpdateProfile.api.tsx`), as shown in `repo_structure.mdc`.
- **Page Routes:** Full page components continue to use the `{RouteName}.page.tsx` convention within the route directory.

### Goal
This co-location strategy keeps all code related to a specific route feature together, improving discoverability and maintainability.