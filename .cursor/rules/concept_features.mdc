---
description: Concept of features (High level)
globs: 
alwaysApply: false
---
# Concept: Building UI Features

This document outlines the core principles and conceptual approaches for assembling UI features within route directories (`services/app/routes/`). It focuses on leveraging the project's structure, component library, and dynamic update mechanisms effectively.

## 1. Principle: Leverage Atomic Design

*   **Foundation:** Build features primarily using the pre-defined Atoms and Molecules available in `services/app/components/`. Refer to `components.mdc` for an overview.
*   **Consistency:** Rely on the inherent styling and behavior of these core components to maintain visual and functional consistency across the application. Avoid overriding their styles locally.
*   **Extend, Don't Recreate:** If existing components lack necessary variations or features, consider extending them or creating new, reusable Atoms/Molecules following established patterns (`how_to_component.mdc`) rather than building complex, one-off structures within a feature route.

## 2. Principle: Co-locate Route Logic

*   **Organization:** Keep all code related to a specific route feature (e.g., user profile editing) together within its route directory (e.g., `services/app/routes/profile/`). This includes page components (`.page.tsx`), API endpoints (`.api.tsx`), and UI fragment sections (`.section.tsx`).
*   **Discoverability:** This co-location strategy improves code discoverability and maintainability by grouping related functionality. Refer to `concept_repo_structure.mdc` for detailed file naming and structure conventions.
*   **Shared vs. Specific:** Only place components or APIs in global directories (`services/app/components/`, etc.) if they are truly generic and reused across multiple, unrelated routes.

## 3. Principle: Efficient Dynamic Updates (Alpine.js vs. HTMX)

*   **Client-Side State (Alpine.js):** For interactions that *only* affect the local UI state within an already-rendered section (e.g., toggling edit mode, showing/hiding elements, simple input validation feedback), **use Alpine.js**. This avoids unnecessary server round trips and provides a more responsive user experience.
*   **Server Interaction (HTMX):** For actions that require **server-side processing** or **fetching new data** (e.g., submitting a form to save changes, deleting data, loading a completely new section), **use HTMX**. HTMX should primarily handle communication with API endpoints.
*   **Avoid HTMX for Pure UI Toggles:** Do not use HTMX GET requests solely to swap between minor view variations (like display text vs. an input field) if the change can be handled entirely on the client with Alpine.js.
*   **See Examples:** Refer to `examples_features.mdc` for concrete code patterns illustrating how to combine Alpine.js and HTMX effectively for common scenarios like inline editing or modal forms.

## Goal

By adhering to these concepts, features should be built consistently, leverage reusable code effectively, and utilize client-side (Alpine.js) and server-side (HTMX) interactions appropriately for optimal performance and maintainability.