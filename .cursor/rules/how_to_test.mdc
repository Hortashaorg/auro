---
description: How to correctly test
globs: 
alwaysApply: false
---
# How To: Write Tests

This rule defines the conventions and requirements for writing and maintaining tests in this project.

---

## 1. Where to Put Tests

- Place `.spec.ts` files in the same directory as the feature/page/component they test.
- Name the test file after the file it tests (e.g. `Game.page.tsx` â†’ `Game.spec.ts`).

---

## 2. Test Structure & Style

- Use Playwright for end-to-end and UI tests.
- Do not add comments in test files unless absolutely necessary.
- Use the shared `loginAs` helper for authentication. Import it dynamically:
  ```ts
  const { loginAs } = await import(
    `file:///${Deno.cwd()}/playwright/login.ts`
  ) as {
    loginAs: (page: Page, user: "admin" | "player") => Promise<void>;
  };
  ```
- Use hardcoded UUIDs for test servers, locations, and other entities. These should match the values seeded in `seed.e2e.ts`.
- Use robust selectors (`getByRole`, `getByLabel`, `getByText`, `locator().filter()`).
- For headings or key text, use `exact: true` to avoid false positives from partial matches.
- When a value may appear multiple times (e.g., player in multiple leaderboards), use `.first()` to assert only the first occurrence.

---

## 3. What to Test

- The main user flow (e.g. executing an action as player and verifying success).
- Permission checks (e.g. player is redirected from admin pages).
- Form interactions (open modal, fill form, submit, verify result).
- Only test what is necessary for confidence in the feature.

---

## 4. Test Data

- Tests are designed to run in CI pipelines, not in production or dev environments.
- Use the same hardcoded IDs and names in both the seed script and tests.
- Always select assets and locations by name or ID that are guaranteed to exist from the seed.
- If you need to assert on a user's nickname, ensure it is seeded in the e2e setup for reliability.

---

## 5. Example Pattern

```ts
import { expect, type Page, test } from "@playwright/test";

test("player can see the resource leaderboard", async ({ page }) => {
  const cwd = Deno.cwd();
  const { loginAs } = await import(
    `file:///${cwd}/playwright/login.ts`
  ) as {
    loginAs: (page: Page, user: "admin" | "player") => Promise<void>;
  };

  await loginAs(page, "player");
  await page.goto("http://localhost:4000/games/5bbcb026-e240-48d8-b66d-7105df74cf9f/leaderboard");

  await expect(page.getByRole("heading", { name: "Leaderboards", exact: true })).toBeVisible();
  await expect(page.getByText("testuserplayer").first()).toBeVisible();
});
```

---

## 6. Maintenance

- When changing test data or IDs, update both the seed script and all affected tests.
- Avoid tests that depend on timing, random data, or external state.

---

## 7. Future

- Add more examples or patterns as the project grows.
- Consider a high-level `concept_testing` rule if testing strategy becomes more complex.

--- 