---
description: 
globs: 
alwaysApply: true
---
# Rule Usage and Maintenance Guidelines

This rule outlines how to effectively leverage and maintain the project's defined rules during development.

## 1. Consult Rules Before Starting Tasks

- **Mandatory First Step:** Before beginning any coding task, refactoring effort, or component creation, **always** check for existing rules that might be relevant. Use available tools or search functions to find rules related to the task domain (e.g., UI building, state management, naming conventions).
- **Purpose:** Consulting rules first ensures alignment with established project standards, patterns, and architectural decisions, preventing rework and maintaining consistency.

## 2. Proactively Suggest Rule Improvements

- **Identify Gaps & Ambiguities:** While working, pay attention to situations where existing rules are unclear, incomplete, or potentially outdated based on the current task or recent changes.
- **Suggest Snippets:** When a gap or necessary clarification is identified, proactively suggest specific, ready-to-use Markdown snippets that can be added to or used to modify the relevant rule file(s).
- **Frequency:** Offer these suggestions naturally during the conversation, especially after completing a sub-task or when discussing component design or implementation details.
- **Goal:** This collaborative approach helps keep the project's documented knowledge accurate, relevant, and continuously improving.

## 3. Guiding Principle: Minimal and Clear Implementation

Strive for the most concise implementation possible while strictly adhering to all other defined rules (Imports, CVA, JSDocs, Props, FC Syntax, Required Props, No Comments).

*   **Leverage Abstractions:** Fully utilize `BaseComponentProps` and framework utilities to avoid redundant definitions (e.g., for `children`, standard attributes).
*   **Avoid Boilerplate:** Eliminate unnecessary variables, overly complex structures, or repetitive code where simpler, direct alternatives exist and meet the requirements.
*   **Clarity Over Premature Optimization:** While conciseness is valued, ensure the code remains readable and maintainable.
*   **Self-Explanatory Code:** Write code that clearly expresses its intent, minimizing the need for comments outside of the required JSDocs.