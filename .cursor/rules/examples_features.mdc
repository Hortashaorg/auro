---
description: 
globs: 
alwaysApply: true
---
# Rule: Feature Code Examples & Common Patterns

This rule provides concrete code examples for common patterns used throughout the application. Refer to these examples when implementing similar features.

---

## Pattern 1: Inline Edit using Alpine.js State

This pattern uses Alpine.js to toggle between a display view and an edit form within a single section component, minimizing server requests. HTMX is used only for the final save action.

**Use Case:** Simple inline editing of a single field or closely related fields where the form doesn't require complex server-side data fetching just to display it.

**Example Snippet (`.section.tsx`):**

```typescript
import { Button } from "@comp/atoms/buttons/Button.tsx";
import { Form, Input, Label } from "@comp/atoms/form/index.ts";
// ... other necessary imports ...

export const SomeInlineEditableSection = async () => {
  // ... fetch initial data (e.g., currentName) ...
  const currentName = /* ... fetched name ... */ "";
  const escapedName = currentName.replace(/'/g, "\\'");

  return (
    <Flex
      id="some-unique-id-for-section" // Target for HTMX swap after save
      direction="col"
      gap="md"
      // Alpine state: isEditing flag and editable value
      x-data={`{ isEditing: false, editableValue: '${escapedName}' }`}
    >
      {/* Display Mode */}
      <Flex direction="col" x-show="!isEditing" gap="md">
        <Text variant="strong">Current Value:</Text>
        <Text x-text="editableValue || 'Not set'"></Text>
        <Button variant="outline" size="sm" x-on:click="isEditing = true">
          Edit
        </Button>
      </Flex>

      {/* Edit Mode Form */}
      <Form
        x-show="isEditing"
        style="display: none;"
        hx-post="/api/feature/update-value" // POST to update endpoint
        hx-target="#some-unique-id-for-section" // Target the root element
        hx-swap="outerHTML" // Replace entire component on success
      >
        {/* ... Label, FormControl, Input using x-model="editableValue" ... */}
        <Input name="value" required x-model="editableValue" ... />
        <ButtonGroup>
          <Button variant="outline" size="sm" x-on:click="isEditing = false">
            Cancel
          </Button>
          <Button type="submit" variant="primary" size="sm">
            Save Changes
          </Button>
        </ButtonGroup>
      </Form>
    </Flex>
  );
};
```

---

## Pattern 2: Bulk Edit using Separate Form Section & API

This pattern uses HTMX to fetch a separate form component for editing multiple items (e.g., in a table) and a dedicated API endpoint to process the bulk update. *Note: This pattern is often less ideal than using modals (Pattern 4) if the form doesn't require complex server fetches.*

**Use Case:** Editing multiple related items at once, especially when the form structure is significantly different from the display structure.

**Example Snippets:**

**Form Component Snippet (`SomeBulkEditForm.section.tsx`):**

```typescript
// ... imports ...
export const SomeBulkEditForm: FC<Props> = ({ itemsToEdit }) => {
  return (
    <div id="bulk-edit-section-id">
      <Form
        hx-post="/api/feature/bulk-update" // POST to bulk update API
        hx-target="#bulk-edit-section-id" // Target containing element
        hx-swap="outerHTML" // Replace on success
      >
        <Table>
          {/* ... Table Header ... */}
          <TableBody>
            {itemsToEdit.map((item) => (
              <TableRow key={item.id}>
                <TableCell>{item.label}</TableCell>
                <TableCell>
                  {/* Input name includes unique ID */}
                  <Input name={`item_${item.id}_value`} value={item.value} ... />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        <ButtonGroup>
          <Button type="button" hx-get="/api/feature/cancel-bulk-edit" ...>
            Cancel
          </Button>
          <Button type="submit">Save Changes</Button>
        </ButtonGroup>
      </Form>
    </div>
  );
};
```

**API Handler Snippet (`BulkUpdate.api.tsx`):**

```typescript
// ... imports, createRoute setup ...
const formSchema = v.record(v.string(), v.string()); // Or more specific schema

const UpdateHandler = async () => {
  // ... get context, validate form (result = context.req.valid("form")) ...
  const formData = result.output;
  const updatePromises = [];

  // Loop through form data
  for (const [key, value] of Object.entries(formData)) {
    if (key.startsWith("item_") && key.endsWith("_value")) {
      const itemId = key.split("_")[1];
      const newValue = value;
      // Add DB update to promises array
      updatePromises.push(
        db.update(schema.someTable).set({ value: newValue }).where(...)
      );
    }
  }
  // Execute all updates
  await Promise.all(updatePromises);
  // Return the updated display component/table
  return <SomeDisplayTable />;
};

export const bulkUpdateRoute = createRoute({
  path: "/api/feature/bulk-update",
  component: UpdateHandler,
  formValidationSchema: formSchema,
  // ... other options ...
});
```

---

## Pattern 3: Basic API Endpoint (`createRoute` - Simple GET)

This shows the minimal structure for creating a simple API endpoint, often used for fetching display fragments or handling simple cancel actions (though cancel is often better handled client-side).

**Use Case:** Simple GET requests returning JSX fragments.

**Example Snippet (`SomeDisplayFragment.api.tsx`):**

```typescript
import { SomeDisplayComponent } from "./SomeDisplayComponent.section.tsx";
import { createRoute } from "@kalena/framework";
// ... other imports ...

// Simple handler function returns the desired JSX
const Handler = () => {
  return <SomeDisplayComponent />;
};

// Define the route with createRoute
export const someDisplayFragmentRoute = createRoute({
  path: "/api/feature/some-display-fragment", // API path
  component: Handler,
  permission: { /* ... */ },
  partial: true,
  // ... other options ...
});
```

---

## Pattern 4: Co-located Modal for Editing

This pattern avoids fetching modal content separately. The modal and its form are defined directly within the component containing the trigger button. This is suitable when the form doesn't require complex data fetching just to be displayed.

**Use Case:** Editing a specific item where the edit form is relatively simple (e.g., changing a name). Preferred over Pattern 1 for layout stability.

**Example Snippets:**

**Display Section Snippet (`SomeEditableFlex.section.tsx`):**

```typescript
// ... imports including Modal, ModalButton, EditForm ...
import { Modal, ModalButton } from "@comp/molecules/modal/index.ts";
import { EditForm } from "./EditForm.section.tsx";

export const SomeEditableFlex: FC = async (props) => {
  // ... fetch currentValue ...
  const modalRef = "editModalUniqueId"; // Can be dynamic if needed (e.g., with index)

  return (
    <Flex id="display-section-id" {...props}>
      {/* Display current value */}
      <Text>{currentValue || "..."}</Text>

      {/* Button triggers the co-located modal by modalRef */}
      <ModalButton modalRef={modalRef} ... >
        Edit
      </ModalButton>

      {/* Modal structure defined directly here */}
      <Modal modalRef={modalRef} title="Edit Value">
        {/* Form rendered directly, passing necessary props */}
        <EditForm currentValue={currentValue} />
      </Modal>
    </Flex>
  );
};
```

**Form Section Snippet (`EditForm.section.tsx`):**

```typescript
// ... imports ...
export const EditForm: FC<Props> = ({ currentValue }) => {
  return (
    <Form
      hx-post="/api/feature/update-value"
      hx-swap="none" // Rely on API's OOB swap to update display
    >
      {/* ... form content ... */}
      <Input name="value" value={currentValue} ... />
      <ButtonGroup>
        <Button type="button" data-dismiss="modal">Cancel</Button>
        <Button type="submit">Save Changes</Button>
      </ButtonGroup>
    </Form>
  );
};
```

*(Update API would use HX-Trigger and OOB swap as shown in `api_examples.mdc`)*

---