---
description: How to properly create a component
globs: 
alwaysApply: false
---
# Component Structure and Implementation Rules

This document outlines the standard rules for creating and structuring UI components within this project. Adhering to these rules ensures consistency, maintainability, and aligns with our specific framework abstractions.

## 1. Imports and Framework Usage

*   **Primary Source:** All necessary utilities, types (`FC`), and functions for creating UI components **must** be imported primarily from `@kalena/framework` or project-specific utility directories (e.g., `@comp/utils`).
*   **Abstraction Layer:** Our components are built upon a custom abstraction layer (using Hono) and integrate tightly with AlpineJS. Direct usage of React, Preact, or standard JSX patterns is generally avoided. Import only what is necessary from the provided framework/utility modules.

## 2. Styling with CVA

*   **Mandatory CVA:** `class-variance-authority` (CVA) **must** be used for defining component styles, even if the component doesn't initially have variants.
*   **Benefits:** This approach promotes styling consistency, simplifies adding future variants, enables type-safe variant props, and keeps styling logic colocated with the component definition.

## 3. Documentation (JSDocs)

*   **Required for Reusable Components:** Reusable components (typically Atoms and Molecules residing in `services/app/components/`) **must** include comprehensive JSDoc comments explaining their purpose, props, and usage.
*   **Discouraged for Sections/Pages:** For route-specific files (`.page.tsx`, `.section.tsx`), comments (including JSDocs) are discouraged. Prioritize self-explanatory code.
*   **Core Requirements:** When included, JSDocs should clearly state the component's function and document each key prop using `@param`. Include a usage example with `@example`. Describe the props as they appear in the component's `Props` type.

*   **Example:**

    ```typescript
    import type { FC } from "@kalena/framework";
    import { cva, type VariantProps } from "class-variance-authority";

    const buttonVariants = cva(/* ... variants config ... */);

    type ButtonProps = JSX.IntrinsicElements["button"] &
      VariantProps<typeof buttonVariants> & {
        // Additional specific props if any
      };

  /**
  * Button component for triggering actions
  *
  * @props
  * - variant: Visual style of the button ('primary', 'secondary', etc.)
  * - buttonSize: Size of the button ('sm', 'md', 'lg', 'xl')
  * - disabled: Whether the button is disabled
  *
  * @example
  * <Button
  *   variant="primary"
  *   buttonSize="md"
  *   x-on:click="handleClick"
  * >
  *   Click me
  * </Button>
  */
    export const Button: FC<ButtonProps> = ({
      className,
      variant,
      size,
      children,
      ...props
    }) => {
      return (
        <button
          className={buttonVariants({ variant, size, className })}
          {...props}
        >
          {children}
        </button>
      );
    };
    ```


## 4. Styling Application

*   **Color Styling:** Follow the guidelines specified in the `styling` rule for applying colors and ensuring theme consistency (e.g., light/dark mode).

## 5. Props Definition and Limitation

*   **Type Definition:** Component props **must** be defined using a specific TypeScript `type` (e.g., `ComponentNameProps`).
*   **Inheritance:** Props can inherit from `BaseComponentProps` where appropriate, but favor defining explicit props needed by the component.
*   **Avoid Broad Types:** Do **not** directly use generic types like `JSX.IntrinsicElements` or `React.HTMLAttributes` unless absolutely necessary and justified. The goal is to limit passable props to only those relevant to the component's specific function.
*   **Clarity:** Limiting props makes component usage clearer and the API easier to understand, as only relevant options are exposed.

## 6. Component Definition Syntax

*   **Standard:** Components **must** be defined as functional components using the `FC<Props>` type signature from `@kalena/framework`. Example: `export const MyComponent: FC<MyComponentProps> = ({...}) => { ... };`

## 7. Code Comments

*   **JSDocs Only:** Code comments outside of the JSDoc block at the beginning of the component file are **prohibited**. Logic should be clear from the code itself or explained within the JSDocs.

## 8. Required Props

*   **Mandatory When Necessary:** If a component cannot function correctly or logically without a specific prop, that prop **must** be marked as required (i.e., not optional `?`) in the props type definition.
