---
description: Overview of the repository structure
globs: 
alwaysApply: false
---
# Repository Structure Overview

This document outlines the main directories and their purpose within the project.

## Top-Level Directories

- `packages/`: Contains reusable libraries or modules shared across different services or applications within the monorepo (if applicable).
- `services/`: Houses the distinct applications or microservices of the project. The main web application resides here.
- `scripts/`: Holds utility scripts for development, building, deployment, etc.
- `.devcontainer/`: Configuration for the development container environment.

## Main Application (`services/app/`)

The primary web application code lives within `services/app/`.
**Note:** When referencing paths within this application (e.g., in imports or tool commands), ensure they start directly from `services/app/...`, avoiding any extra leading prefixes like `app/`.

- `components/`: Contains reusable UI components following an Atomic Design methodology.
    - Organized into `atoms/` and `molecules/`.
    - Refer to `components.mdc` for detailed component classification and usage guidelines.
- `routes/`: Contains all route-specific code, organized by feature/route name
    - Each route (e.g., profile, dashboard) follows a consistent structure:
        - `{RouteName}.page.tsx`: Main page component
        - `index.ts`: Exports for the route
    - Refer to `route_structure.mdc` for detailed guidelines
- `public/`: Static assets served directly by the web server (e.g., images, client-side JS libraries like `darkmode.js` or `favicon.ico`).
- `permissions/`: Logic related to user permissions and authorization (inferred from imports like `@permissions/index.ts`).
- `layout/`: Page Layouts, Navbar type components that can be reused across pages.

---

**Goal:** Maintain a clear separation of concerns, making it easier to locate code, understand responsibilities, and manage the different parts of the application and the overall project.

## Route Structure Example

```
routes/
  profile/                           # Example route
    Profile.page.tsx                 # Main page component
    UpdateProfile.api.tsx            # API endpoints (verb-first naming)
    UploadAvatar.api.tsx
    DeleteAccount.api.tsx
    ProfileDetails.section.tsx       # UI sections (noun-first naming)
    ProfileSettingsForm.section.tsx
    ProfileActivityGrid.section.tsx
    index.ts                         # Route exports

  dashboard/                         # Another route example
    Dashboard.page.tsx
    FetchMetrics.api.tsx
    UpdateWidget.api.tsx
    DashboardSummary.section.tsx
    MetricsGrid.section.tsx
    index.ts
``` 